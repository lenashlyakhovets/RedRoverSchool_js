"use strict";

//================= 1. Нарисуйте ромб =================

//          1
//         121
//        12321
//       1234321
//      123454321
//     12345654321
//    1234567654321
//   123456787654321
//  12345678987654321
// 1234567890987654321
//  12345678987654321
//   123456787654321
//    1234567654321
//     12345654321
//      123454321
//       1234321
//        12321
//         121
//          1

const size = 10; // размер ромба

// Рисуем верхнюю половину ромба
for (let i = 1; i <= size; i++) {
    let row = '';
    // Добавляем пробелы перед числами
    for (let j = 1; j <= size - i; j++) {
        row += ' ';
    }
    // Добавляем числа в порядке возрастания
    for (let j = 1; j <= i; j++) {        
        row += j;
    }
    // Добавляем числа в порядке убывания, кроме последнего
    for (let j = i - 1; j >= 1; j--) {
        row += j;
    }    
    console.log(row);
}

// Рисуем нижнюю половину ромба
for (let i = size - 1; i >= 1; i--) {
    let row = '';
    // Добавляем пробелы перед числами
    for (let j = 1; j <= size - i; j++) {
        row += ' ';
    }
    // Добавляем числа в порядке возрастания
    for (let j = 1; j <= i; j++) {
        row += j;
    }
    // Добавляем числа в порядке убывания, кроме последнего
    for (let j = i - 1; j >= 1; j--) {
        row += j;
    }
    console.log(row);
}



//================= 2. Нарисуйте елочку =================

const lines = 4;
let result = '';

for (let i = 0; i <= lines; i++) {
    for (let k = 0; k < lines - i; k++) {
        result += " ";
    }
    for (let k = 0; k < 2 * i + 1; k++) {
        result += "*";
    }
    result += "\n";
}
console.log(result);



//================= 3. Нарисуйте треугольник =================

// 1 
// 2 6 
// 3 7 10 
// 4 8 11 13 
// 5 9 12 14 15

// Variant 1 =================

let str = '';
let space = ' ';
let x = 5;
for (let i = 1; i <= x; i++) {
    let num = i;
    for (let j = 1; j <= i; j++) {
        str += num + space;
        num = num + (x - j);
    }
    str += '\n'
}
console.log(str);

// Variant 2 =================

const numRows = 5; // количество строк в таблице
const table = []; // пустой массив для хранения значений таблицы

// заполнение массива table значениями таблицы
for (let i = 0; i < numRows; i++) {
    table[i] = [];
    for (let j = 0; j <= i; j++) {
        table[i][j] = (i + 1) + (j * numRows) - ((j * (j + 1)) / 2);
    }
}

// вывод значений таблицы в консоль
for (let i = 0; i < numRows; i++) {
    console.log(table[i].join(' '));
}



//================= 4. Усовершенствуйте решение задачи про улитку с помощью  наиболее подходящего цикла =================



//================= 5. Задача с интервью* =================

/* У вас есть массив с тремя видами скобок, предположим
[ ‘{‘, ‘)’, ‘(‘, ‘)’, ‘)’, ‘}, ‘[‘, ‘]’, ‘)’] . Количество элементов и последовательность может быть разной.
Нужно выяснить, все ли скобки являются парными  в правильной последовательности (открывающая и затем закрывающая). Также, скобки могут быть вложенными, но тем не менее, если последовательность соблюдена, то они считаются парными.

 Пример:
[ ‘)’, ‘{‘, ‘(’, ‘(‘, ‘)’, ‘)’, ‘}, ‘[‘, ‘]’, ‘(‘ ] - у двух нет пары (нарушена последовательность)
[ ‘{‘, ‘(’, ‘(‘, ‘)’, ‘)’, ‘}, ‘[‘, ‘]’ ] - у всех есть пара
[ ‘{‘, ‘(’, ‘(‘, ‘)’, ‘)’, ‘}, ‘[‘, ‘[’, ‘)’ ] - у трех нет пары

*/

//================= Креативное задание*: =================

//1. Внедрите в свой код про кофе цикл, там, где это может понадобиться. Добавьте комментарии в код с пояснениями изменений, зачем они нужны.

/* 2. Продумайте на будущее план развития своего кода с кофе, где в реальной жизни он мог бы быть использован. Начните создавать мини-документацию к своему проекту. Пропишите требования так, как вы хотели бы их видеть на своем проекте и чтобы посторонний человек мог в них разобраться. Скорее всего, что-то придется добавить или изменить позже.*/
